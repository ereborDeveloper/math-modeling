package modeling.mathmodeling.service;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.junit.jupiter.SpringExtension;

import java.util.ArrayList;
import java.util.HashMap;

import static org.junit.jupiter.api.Assertions.*;

@ExtendWith(SpringExtension.class)
@SpringBootTest
class ParseServiceImplTest {

    @Autowired
    ParseService parseService;

    @Test
    void getTerms_order_difference() {
        String inNew = "+0.7012694921810798*v11^3.0*w11*Cos(0.5817764173314431*yy)*Sin(0.5817764173314431*xx)*Sin(0.5817764173314431*xx)^3.0*Sin(1.1635528346628863*yy)^3.0-2*0-2*0+0+2*0.10519042382716197*u11^2.0*v11*w11*Cos(0.5817764173314431*yy)*Sin(0.5817764173314431*xx)*Sin(1.1635528346628863*xx)^2.0*Sin(0.5817764173314431*xx)*Sin(0.5817764173314431*yy)^2.0*Sin(1.1635528346628863*yy)+2*0+4089.6745647752205*u11*w11^2*Cos(0.5817764173314431*xx)^2*Cos(1.1635528346628863*xx)*Sin(0.5817764173314431*yy)^3+2*715.6930488356636*u11*w11^2*Cos(0.5817764173314431*xx)*Cos(0.5817764173314431*yy)^2*Sin(0.5817764173314431*xx)*Sin(1.1635528346628863*xx)*Sin(0.5817764173314431*yy)+0+14.962224017470318*v11*w11^3*Cos(0.5817764173314431*xx)^2*Cos(0.5817764173314431*yy)*Sin(0.5817764173314431*xx)*Sin(0.5817764173314431*yy)^2*Sin(0.5817764173314431*xx)*Sin(1.1635528346628863*yy)+4089.674564775221*v11*w11^2*Cos(0.5817764173314431*yy)^2*Cos(1.1635528346628863*yy)*Sin(0.5817764173314431*xx)^3+2*0.4151876851419801*psix11^2*Cos(0.5817764173314431*xx)^2*Cos(0.5817764173314431*yy)^2+7.207248144419531*v11^2*Sin(0.5817764173314431*xx)^2*Sin(1.1635528346628863*yy)^2-2*0+685.8178306642594*u11^2*w11*Cos(0.5817764173314431*xx)*Cos(1.1635528346628863*xx)*Sin(0.5817764173314431*yy)^2*Sin(1.1635528346628863*xx)*Sin(0.5817764173314431*yy)-0-2*0+2*1230.1857337540152*u11*v11*Cos(0.5817764173314431*xx)*Cos(0.5817764173314431*yy)*Sin(1.1635528346628863*xx)*Sin(1.1635528346628863*yy)-0+2*147.7485869606004*psix11*u11*Sin(1.1635528346628863*xx)*Cos(0.5817764173314431*xx)*Sin(0.5817764173314431*yy)*Sin(0.5817764173314431*yy)-1355.6591188098544*u11*w11*Cos(1.1635528346628863*xx)*Sin(0.5817764173314431*yy)*Sin(0.5817764173314431*xx)*Sin(0.5817764173314431*yy)+2.372501057954172*psix11^2*Sin(0.5817764173314431*xx)^2*Sin(0.5817764173314431*yy)^2+2*0+2*208.18666893031497*w11^4*Cos(0.5817764173314431*xx)^2*Cos(0.5817764173314431*yy)^2*Sin(0.5817764173314431*xx)^2*Sin(0.5817764173314431*yy)^2+0-2*0-176.82510245345927*v11*w11*Cos(1.1635528346628863*yy)*Sin(0.5817764173314431*xx)*Sin(0.5817764173314431*xx)*Sin(0.5817764173314431*yy)+0.014699920318265254*v11^4.0*Sin(0.5817764173314431*xx)^4.0*Sin(1.1635528346628863*yy)^4.0+102.87267459963891*u11*v11*w11*Cos(0.5817764173314431*xx)*Cos(1.1635528346628863*yy)*Sin(0.5817764173314431*xx)*Sin(0.5817764173314431*yy)*Sin(1.1635528346628863*xx)*Sin(0.5817764173314431*yy)+28.752049179424272*v11^3.0*Cos(1.1635528346628863*yy)*Sin(0.5817764173314431*xx)*Sin(0.5817764173314431*xx)^2.0*Sin(1.1635528346628863*yy)^2.0+0+0+2*32.12373587150506*w11^2*Sin(0.5817764173314431*xx)^2*Sin(0.5817764173314431*yy)^2+2*5.031608606399247*u11^2*v11*Cos(0.5817764173314431*yy)*Sin(1.1635528346628863*xx)*Sin(1.1635528346628863*xx)*Sin(0.5817764173314431*xx)*Sin(0.5817764173314431*yy)*Sin(1.1635528346628863*yy)+0+0+99.7481601164688*u11*w11^3*Cos(0.5817764173314431*xx)^3*Sin(0.5817764173314431*yy)^3*Sin(1.1635528346628863*xx)*Sin(0.5817764173314431*yy)+2*1762.1111935482859*psix11*w11*Cos(0.5817764173314431*xx)^2*Sin(0.5817764173314431*yy)^2+171.91328717544255*u11*w11*Cos(0.5817764173314431*xx)*Sin(1.1635528346628863*xx)*Sin(0.5817764173314431*yy)^2-0-197.17262631597455*w11^3*Cos(0.5817764173314431*yy)^2*Sin(0.5817764173314431*xx)^2*Sin(0.5817764173314431*xx)*Sin(0.5817764173314431*yy)+0+2*0.4151876851419801*psiy11^2*Cos(0.5817764173314431*xx)^2*Cos(0.5817764173314431*yy)^2+2*34.91185604076408*v11*w11^3*Cos(0.5817764173314431*xx)^2*Cos(0.5817764173314431*yy)*Sin(0.5817764173314431*xx)*Sin(0.5817764173314431*yy)^2*Sin(0.5817764173314431*xx)*Sin(1.1635528346628863*yy)+2*60.0090601831227*u11^2*w11*Cos(0.5817764173314431*yy)^2*Sin(0.5817764173314431*xx)*Sin(1.1635528346628863*xx)*Sin(1.1635528346628863*xx)*Sin(0.5817764173314431*yy)+2*615.0928668770076*v11^2*Cos(0.5817764173314431*xx)^2*Sin(1.1635528346628863*yy)^2+0+2*147.7485869606004*psiy11*v11*Sin(0.5817764173314431*xx)*Sin(0.5817764173314431*xx)*Sin(1.1635528346628863*yy)*Cos(0.5817764173314431*yy)+2*0.6272724060953592*u11^2.0*w11^2*Cos(0.5817764173314431*yy)^2*Sin(0.5817764173314431*xx)^2*Sin(1.1635528346628863*xx)^2.0*Sin(0.5817764173314431*yy)^2.0-2*0-2*0+2*2.509089624381437*u11*v11*w11^2*Cos(0.5817764173314431*xx)*Cos(0.5817764173314431*yy)*Sin(0.5817764173314431*xx)*Sin(0.5817764173314431*yy)*Sin(1.1635528346628863*xx)*Sin(0.5817764173314431*xx)*Sin(0.5817764173314431*yy)*Sin(1.1635528346628863*yy)+2*0+2*1.4636356142225047*v11^2.0*w11^2*Cos(0.5817764173314431*xx)^2*Sin(0.5817764173314431*yy)^2*Sin(0.5817764173314431*xx)^2.0*Sin(1.1635528346628863*yy)^2.0+28.752049179424272*u11^3.0*Cos(1.1635528346628863*xx)*Sin(0.5817764173314431*yy)*Sin(1.1635528346628863*xx)^2.0*Sin(0.5817764173314431*yy)^2.0+0+8.363632081271456*v11^2*w11^2*Cos(0.5817764173314431*yy)^2*Sin(0.5817764173314431*xx)^2*Sin(0.5817764173314431*xx)^2*Sin(1.1635528346628863*yy)^2-2*0+2*0.010289944222785676*u11^2.0*v11^2.0*Sin(1.1635528346628863*xx)^2.0*Sin(0.5817764173314431*xx)^2.0*Sin(0.5817764173314431*yy)^2.0*Sin(1.1635528346628863*yy)^2.0+297.4095270433071*w11^4*Cos(0.5817764173314431*yy)^4*Sin(0.5817764173314431*xx)^4-4.312807376913641*v11*w11^2*Cos(0.5817764173314431*yy)*Sin(0.5817764173314431*xx)*Sin(0.5817764173314431*xx)*Sin(0.5817764173314431*xx)*Sin(1.1635528346628863*yy)*Sin(0.5817764173314431*yy)+2*60.0090601831227*u11*v11*w11*Cos(0.5817764173314431*xx)*Cos(0.5817764173314431*yy)*Sin(1.1635528346628863*xx)*Sin(0.5817764173314431*yy)*Sin(0.5817764173314431*xx)*Sin(1.1635528346628863*yy)-33.064856556337915*v11*w11^2*Cos(0.5817764173314431*yy)*Sin(0.5817764173314431*xx)*Sin(0.5817764173314431*xx)*Sin(0.5817764173314431*xx)*Sin(1.1635528346628863*yy)*Sin(0.5817764173314431*yy)-1.3862024860124134*v11^2.0*w11*Sin(0.5817764173314431*xx)^2.0*Sin(0.5817764173314431*xx)*Sin(1.1635528346628863*yy)^2.0*Sin(0.5817764173314431*yy)-1355.6591188098544*v11*w11*Cos(1.1635528346628863*yy)*Sin(0.5817764173314431*xx)*Sin(0.5817764173314431*xx)*Sin(0.5817764173314431*yy)-2*0+4.181816040635728*v11^2.0*w11^2*Cos(0.5817764173314431*yy)^2*Sin(0.5817764173314431*xx)^2*Sin(0.5817764173314431*xx)^2.0*Sin(1.1635528346628863*yy)^2.0+102.8726745996389*u11*v11*w11*Cos(0.5817764173314431*xx)*Cos(1.1635528346628863*yy)*Sin(0.5817764173314431*xx)*Sin(0.5817764173314431*yy)*Sin(1.1635528346628863*xx)*Sin(0.5817764173314431*yy)+2*1762.1111935482859*psiy11*w11*Cos(0.5817764173314431*yy)^2*Sin(0.5817764173314431*xx)^2-0-1.3862024860124134*u11^2.0*w11*Sin(1.1635528346628863*xx)^2.0*Sin(0.5817764173314431*xx)*Sin(0.5817764173314431*yy)^2.0*Sin(0.5817764173314431*yy)+2*0-2*0+2*34.91185604076408*u11*w11^3*Cos(0.5817764173314431*xx)*Cos(0.5817764173314431*yy)^2*Sin(0.5817764173314431*xx)^2*Sin(0.5817764173314431*yy)*Sin(1.1635528346628863*xx)*Sin(0.5817764173314431*yy)+0+14.96222401747032*u11*w11^3*Cos(0.5817764173314431*xx)*Cos(0.5817764173314431*yy)^2*Sin(0.5817764173314431*xx)^2*Sin(0.5817764173314431*yy)*Sin(1.1635528346628863*xx)*Sin(0.5817764173314431*yy)-2*0+0+2*0+1025.154737122155*w11^2*Cos(0.5817764173314431*xx)^2*Sin(0.5817764173314431*yy)^2+2*0.24544432226337792*u11^2.0*v11*w11*Cos(0.5817764173314431*yy)*Sin(0.5817764173314431*xx)*Sin(1.1635528346628863*xx)^2.0*Sin(0.5817764173314431*xx)*Sin(0.5817764173314431*yy)^2.0*Sin(1.1635528346628863*yy)+2*0+2*4.312807376913641*u11*v11^2.0*Cos(1.1635528346628863*xx)*Sin(0.5817764173314431*yy)*Sin(0.5817764173314431*xx)^2.0*Sin(1.1635528346628863*yy)^2.0+4.181816040635728*u11^2.0*w11^2*Cos(0.5817764173314431*xx)^2*Sin(0.5817764173314431*yy)^2*Sin(1.1635528346628863*xx)^2.0*Sin(0.5817764173314431*yy)^2.0+14059.265528617318*v11^2*Cos(1.1635528346628863*yy)^2*Sin(0.5817764173314431*xx)^2+0.7012694921810798*u11^3.0*w11*Cos(0.5817764173314431*xx)*Sin(0.5817764173314431*yy)*Sin(1.1635528346628863*xx)^3.0*Sin(0.5817764173314431*yy)^3.0+0-q*w11*Sin(0.5817764173314431*xx)*Sin(0.5817764173314431*yy)+2*60.0090601831227*v11^2*w11*Cos(0.5817764173314431*xx)^2*Sin(0.5817764173314431*yy)*Sin(1.1635528346628863*yy)*Sin(0.5817764173314431*xx)*Sin(1.1635528346628863*yy)+2*0-2*0+102.8726745996389*u11*v11*w11*Cos(1.1635528346628863*xx)*Cos(0.5817764173314431*yy)*Sin(0.5817764173314431*xx)*Sin(0.5817764173314431*yy)*Sin(0.5817764173314431*xx)*Sin(1.1635528346628863*yy)-197.17262631597455*w11^3*Cos(0.5817764173314431*xx)^2*Sin(0.5817764173314431*yy)^2*Sin(0.5817764173314431*xx)*Sin(0.5817764173314431*yy)+2*5.031608606399247*u11*v11^2*Cos(0.5817764173314431*xx)*Sin(1.1635528346628863*yy)*Sin(1.1635528346628863*xx)*Sin(0.5817764173314431*xx)*Sin(0.5817764173314431*yy)*Sin(1.1635528346628863*yy)+2*0+2*0+2*0+685.8178306642594*v11^2*w11*Cos(0.5817764173314431*yy)*Cos(1.1635528346628863*yy)*Sin(0.5817764173314431*xx)^2*Sin(0.5817764173314431*xx)*Sin(1.1635528346628863*yy)+2*0.004409976095479576*u11^2.0*v11^2.0*Sin(1.1635528346628863*xx)^2.0*Sin(0.5817764173314431*xx)^2.0*Sin(0.5817764173314431*yy)^2.0*Sin(1.1635528346628863*yy)^2.0+99.7481601164688*v11*w11^3*Cos(0.5817764173314431*yy)^3*Sin(0.5817764173314431*xx)^3*Sin(0.5817764173314431*xx)*Sin(1.1635528346628863*yy)+2.372501057954172*psiy11^2*Sin(0.5817764173314431*xx)^2*Sin(0.5817764173314431*yy)^2+2*1.4636356142225047*u11^2.0*w11^2*Cos(0.5817764173314431*yy)^2*Sin(0.5817764173314431*xx)^2*Sin(1.1635528346628863*xx)^2.0*Sin(0.5817764173314431*yy)^2.0-25.718168649909728*w11^3*Cos(0.5817764173314431*xx)^2*Sin(0.5817764173314431*yy)^2*Sin(0.5817764173314431*xx)*Sin(0.5817764173314431*yy)+2*0+2*4.312807376913641*u11^2.0*v11*Cos(1.1635528346628863*yy)*Sin(0.5817764173314431*xx)*Sin(1.1635528346628863*xx)^2.0*Sin(0.5817764173314431*yy)^2.0-2*0+14059.265528617318*u11^2*Cos(1.1635528346628863*xx)^2*Sin(0.5817764173314431*yy)^2+0+7.207248144419531*u11^2*Sin(1.1635528346628863*xx)^2*Sin(0.5817764173314431*yy)^2+2*60.0090601831227*u11*v11*w11*Cos(0.5817764173314431*xx)*Cos(0.5817764173314431*yy)*Sin(0.5817764173314431*xx)*Sin(1.1635528346628863*yy)*Sin(1.1635528346628863*xx)*Sin(0.5817764173314431*yy)+2*5.854542456890019*u11*v11*w11^2*Cos(0.5817764173314431*xx)*Cos(0.5817764173314431*yy)*Sin(0.5817764173314431*xx)*Sin(0.5817764173314431*yy)*Sin(1.1635528346628863*xx)*Sin(0.5817764173314431*xx)*Sin(0.5817764173314431*yy)*Sin(1.1635528346628863*yy)-4.312807376913641*u11*w11^2*Cos(0.5817764173314431*xx)*Sin(0.5817764173314431*yy)*Sin(1.1635528346628863*xx)*Sin(0.5817764173314431*xx)*Sin(0.5817764173314431*yy)*Sin(0.5817764173314431*yy)+2*0.7117503173862515*psix11*psiy11*Sin(0.5817764173314431*xx)^2*Sin(0.5817764173314431*yy)^2-33.064856556337915*u11*w11^2*Cos(0.5817764173314431*xx)*Sin(0.5817764173314431*yy)*Sin(1.1635528346628863*xx)*Sin(0.5817764173314431*xx)*Sin(0.5817764173314431*yy)*Sin(0.5817764173314431*yy)+2*0+0+14.96222401747032*v11*w11^3*Cos(0.5817764173314431*xx)^2*Cos(0.5817764173314431*yy)*Sin(0.5817764173314431*xx)*Sin(0.5817764173314431*yy)^2*Sin(0.5817764173314431*xx)*Sin(1.1635528346628863*yy)+2*0.6272724060953592*v11^2.0*w11^2*Cos(0.5817764173314431*xx)^2*Sin(0.5817764173314431*yy)^2*Sin(0.5817764173314431*xx)^2.0*Sin(1.1635528346628863*yy)^2.0-2*0+3028.8460326923077*psix11^2*Cos(0.5817764173314431*xx)^2*Sin(0.5817764173314431*yy)^2+2*613.451184716283*v11*w11^2*Cos(0.5817764173314431*xx)^2*Cos(1.1635528346628863*yy)*Sin(0.5817764173314431*xx)*Sin(0.5817764173314431*yy)^2+2*0.8303753702839601*psix11*psiy11*Cos(0.5817764173314431*xx)^2*Cos(0.5817764173314431*yy)^2+2*615.0928668770076*u11^2*Cos(0.5817764173314431*yy)^2*Sin(1.1635528346628863*xx)^2+1025.154737122155*w11^2*Cos(0.5817764173314431*yy)^2*Sin(0.5817764173314431*xx)^2-0.1808090199146626*v11^2.0*w11*Sin(0.5817764173314431*xx)^2.0*Sin(0.5817764173314431*xx)*Sin(1.1635528346628863*yy)^2.0*Sin(0.5817764173314431*yy)+2*0+2*0+171.91328717544255*v11*w11*Cos(0.5817764173314431*yy)*Sin(0.5817764173314431*xx)^2*Sin(1.1635528346628863*yy)-2*0+2*0.10519042382716197*u11*v11^2.0*w11*Cos(0.5817764173314431*xx)*Sin(0.5817764173314431*yy)*Sin(1.1635528346628863*xx)*Sin(0.5817764173314431*xx)^2.0*Sin(0.5817764173314431*yy)*Sin(1.1635528346628863*yy)^2.0+2*0.24544432226337792*u11*v11^2.0*w11*Cos(0.5817764173314431*xx)*Sin(0.5817764173314431*yy)*Sin(1.1635528346628863*xx)*Sin(0.5817764173314431*xx)^2.0*Sin(0.5817764173314431*yy)*Sin(1.1635528346628863*yy)^2.0-2*0+8.363632081271456*u11^2*w11^2*Cos(0.5817764173314431*xx)^2*Sin(0.5817764173314431*yy)^2*Sin(1.1635528346628863*xx)^2*Sin(0.5817764173314431*yy)^2+102.87267459963891*u11*v11*w11*Cos(1.1635528346628863*xx)*Cos(0.5817764173314431*yy)*Sin(0.5817764173314431*xx)*Sin(0.5817764173314431*yy)*Sin(0.5817764173314431*xx)*Sin(1.1635528346628863*yy)-0.1808090199146626*u11^2.0*w11*Sin(1.1635528346628863*xx)^2.0*Sin(0.5817764173314431*xx)*Sin(0.5817764173314431*yy)^2.0*Sin(0.5817764173314431*yy)+2*0+0.014699920318265254*u11^4.0*Sin(1.1635528346628863*xx)^4.0*Sin(0.5817764173314431*yy)^4.0+2*613.451184716283*u11*w11^2*Cos(1.1635528346628863*xx)*Cos(0.5817764173314431*yy)^2*Sin(0.5817764173314431*xx)^2*Sin(0.5817764173314431*yy)+297.4095270433071*w11^4*Cos(0.5817764173314431*xx)^4*Sin(0.5817764173314431*yy)^4+14.962224017470318*u11*w11^3*Cos(0.5817764173314431*xx)*Cos(0.5817764173314431*yy)^2*Sin(0.5817764173314431*xx)^2*Sin(0.5817764173314431*yy)*Sin(1.1635528346628863*xx)*Sin(0.5817764173314431*yy)-176.82510245345927*u11*w11*Cos(1.1635528346628863*xx)*Sin(0.5817764173314431*yy)*Sin(0.5817764173314431*xx)*Sin(0.5817764173314431*yy)+2*89.22285811299211*w11^4*Cos(0.5817764173314431*xx)^2*Cos(0.5817764173314431*yy)^2*Sin(0.5817764173314431*xx)^2*Sin(0.5817764173314431*yy)^2+2*4217.779658585195*u11*v11*Cos(1.1635528346628863*xx)*Cos(1.1635528346628863*yy)*Sin(0.5817764173314431*xx)*Sin(0.5817764173314431*yy)+3028.8460326923077*psiy11^2*Sin(0.5817764173314431*xx)^2*Cos(0.5817764173314431*yy)^2+2*0+2*715.6930488356636*v11*w11^2*Cos(0.5817764173314431*xx)^2*Cos(0.5817764173314431*yy)*Sin(0.5817764173314431*xx)*Sin(0.5817764173314431*yy)*Sin(1.1635528346628863*yy)+0-25.718168649909728*w11^3*Cos(0.5817764173314431*yy)^2*Sin(0.5817764173314431*xx)^2*Sin(0.5817764173314431*xx)*Sin(0.5817764173314431*yy)+0+0\n";
        String inOld = "+0.7012694921810798*v11^3.0*w11*Cos(0.5817764173314431*yy)*Sin(0.5817764173314431*xx)*Sin(0.5817764173314431*xx)^3.0*Sin(1.1635528346628863*yy)^3.0-2*0-2*0+0+2*0.10519042382716197*u11^2.0*v11*w11*Cos(0.5817764173314431*yy)*Sin(0.5817764173314431*xx)*Sin(1.1635528346628863*xx)^2.0*Sin(0.5817764173314431*xx)*Sin(0.5817764173314431*yy)^2.0*Sin(1.1635528346628863*yy)+2*0+4089.6745647752205*u11*w11^2*Cos(0.5817764173314431*xx)^2*Cos(1.1635528346628863*xx)*Sin(0.5817764173314431*yy)^3+2*715.6930488356636*u11*w11^2*Cos(0.5817764173314431*xx)*Cos(0.5817764173314431*yy)^2*Sin(0.5817764173314431*xx)*Sin(1.1635528346628863*xx)*Sin(0.5817764173314431*yy)+0+14.962224017470318*v11*w11^3*Cos(0.5817764173314431*xx)^2*Cos(0.5817764173314431*yy)*Sin(0.5817764173314431*xx)*Sin(0.5817764173314431*yy)^2*Sin(0.5817764173314431*xx)*Sin(1.1635528346628863*yy)+4089.674564775221*v11*w11^2*Cos(0.5817764173314431*yy)^2*Cos(1.1635528346628863*yy)*Sin(0.5817764173314431*xx)^3+2*0.4151876851419801*psix11^2*Cos(0.5817764173314431*xx)^2*Cos(0.5817764173314431*yy)^2+7.207248144419531*v11^2*Sin(0.5817764173314431*xx)^2*Sin(1.1635528346628863*yy)^2-2*0+685.8178306642594*u11^2*w11*Cos(0.5817764173314431*xx)*Cos(1.1635528346628863*xx)*Sin(0.5817764173314431*yy)^2*Sin(1.1635528346628863*xx)*Sin(0.5817764173314431*yy)-0-2*0+2*1230.1857337540152*u11*v11*Cos(0.5817764173314431*xx)*Cos(0.5817764173314431*yy)*Sin(1.1635528346628863*xx)*Sin(1.1635528346628863*yy)-0+2*147.7485869606004*psix11*u11*Sin(1.1635528346628863*xx)*Cos(0.5817764173314431*xx)*Sin(0.5817764173314431*yy)*Sin(0.5817764173314431*yy)-1355.6591188098544*u11*w11*Cos(1.1635528346628863*xx)*Sin(0.5817764173314431*yy)*Sin(0.5817764173314431*xx)*Sin(0.5817764173314431*yy)+2.372501057954172*psix11^2*Sin(0.5817764173314431*xx)^2*Sin(0.5817764173314431*yy)^2+2*0+2*208.18666893031497*w11^4*Cos(0.5817764173314431*xx)^2*Cos(0.5817764173314431*yy)^2*Sin(0.5817764173314431*xx)^2*Sin(0.5817764173314431*yy)^2+0-2*0-176.82510245345927*v11*w11*Cos(1.1635528346628863*yy)*Sin(0.5817764173314431*xx)*Sin(0.5817764173314431*xx)*Sin(0.5817764173314431*yy)+102.87267459963891*u11*v11*w11*Cos(0.5817764173314431*xx)*Cos(1.1635528346628863*yy)*Sin(0.5817764173314431*xx)*Sin(0.5817764173314431*yy)*Sin(1.1635528346628863*xx)*Sin(0.5817764173314431*yy)+0.014699920318265254*v11^4.0*Sin(0.5817764173314431*xx)^4.0*Sin(1.1635528346628863*yy)^4.0+28.752049179424272*v11^3.0*Cos(1.1635528346628863*yy)*Sin(0.5817764173314431*xx)*Sin(0.5817764173314431*xx)^2.0*Sin(1.1635528346628863*yy)^2.0+0+2*32.12373587150506*w11^2*Sin(0.5817764173314431*xx)^2*Sin(0.5817764173314431*yy)^2+2*5.031608606399247*u11^2*v11*Cos(0.5817764173314431*yy)*Sin(1.1635528346628863*xx)*Sin(1.1635528346628863*xx)*Sin(0.5817764173314431*xx)*Sin(0.5817764173314431*yy)*Sin(1.1635528346628863*yy)+0+0+99.7481601164688*u11*w11^3*Cos(0.5817764173314431*xx)^3*Sin(0.5817764173314431*yy)^3*Sin(1.1635528346628863*xx)*Sin(0.5817764173314431*yy)+2*1762.1111935482859*psix11*w11*Cos(0.5817764173314431*xx)^2*Sin(0.5817764173314431*yy)^2+171.91328717544255*u11*w11*Cos(0.5817764173314431*xx)*Sin(1.1635528346628863*xx)*Sin(0.5817764173314431*yy)^2-0-197.17262631597455*w11^3*Cos(0.5817764173314431*yy)^2*Sin(0.5817764173314431*xx)^2*Sin(0.5817764173314431*xx)*Sin(0.5817764173314431*yy)+0+0+2*0.4151876851419801*psiy11^2*Cos(0.5817764173314431*xx)^2*Cos(0.5817764173314431*yy)^2+2*60.0090601831227*u11^2*w11*Cos(0.5817764173314431*yy)^2*Sin(0.5817764173314431*xx)*Sin(1.1635528346628863*xx)*Sin(1.1635528346628863*xx)*Sin(0.5817764173314431*yy)+2*34.91185604076408*v11*w11^3*Cos(0.5817764173314431*xx)^2*Cos(0.5817764173314431*yy)*Sin(0.5817764173314431*xx)*Sin(0.5817764173314431*yy)^2*Sin(0.5817764173314431*xx)*Sin(1.1635528346628863*yy)+2*615.0928668770076*v11^2*Cos(0.5817764173314431*xx)^2*Sin(1.1635528346628863*yy)^2+2*147.7485869606004*psiy11*v11*Sin(0.5817764173314431*xx)*Sin(0.5817764173314431*xx)*Sin(1.1635528346628863*yy)*Cos(0.5817764173314431*yy)+0+2*0.6272724060953592*u11^2.0*w11^2*Cos(0.5817764173314431*yy)^2*Sin(0.5817764173314431*xx)^2*Sin(1.1635528346628863*xx)^2.0*Sin(0.5817764173314431*yy)^2.0-2*0-2*0+2*2.509089624381437*u11*v11*w11^2*Cos(0.5817764173314431*xx)*Cos(0.5817764173314431*yy)*Sin(0.5817764173314431*xx)*Sin(0.5817764173314431*yy)*Sin(1.1635528346628863*xx)*Sin(0.5817764173314431*xx)*Sin(0.5817764173314431*yy)*Sin(1.1635528346628863*yy)+2*0+2*1.4636356142225047*v11^2.0*w11^2*Cos(0.5817764173314431*xx)^2*Sin(0.5817764173314431*yy)^2*Sin(0.5817764173314431*xx)^2.0*Sin(1.1635528346628863*yy)^2.0+28.752049179424272*u11^3.0*Cos(1.1635528346628863*xx)*Sin(0.5817764173314431*yy)*Sin(1.1635528346628863*xx)^2.0*Sin(0.5817764173314431*yy)^2.0+0+8.363632081271456*v11^2*w11^2*Cos(0.5817764173314431*yy)^2*Sin(0.5817764173314431*xx)^2*Sin(0.5817764173314431*xx)^2*Sin(1.1635528346628863*yy)^2-2*0+2*0.010289944222785676*u11^2.0*v11^2.0*Sin(1.1635528346628863*xx)^2.0*Sin(0.5817764173314431*xx)^2.0*Sin(0.5817764173314431*yy)^2.0*Sin(1.1635528346628863*yy)^2.0-4.312807376913641*v11*w11^2*Cos(0.5817764173314431*yy)*Sin(0.5817764173314431*xx)*Sin(0.5817764173314431*xx)*Sin(0.5817764173314431*xx)*Sin(1.1635528346628863*yy)*Sin(0.5817764173314431*yy)+297.4095270433071*w11^4*Cos(0.5817764173314431*yy)^4*Sin(0.5817764173314431*xx)^4+2*60.0090601831227*u11*v11*w11*Cos(0.5817764173314431*xx)*Cos(0.5817764173314431*yy)*Sin(1.1635528346628863*xx)*Sin(0.5817764173314431*yy)*Sin(0.5817764173314431*xx)*Sin(1.1635528346628863*yy)-33.064856556337915*v11*w11^2*Cos(0.5817764173314431*yy)*Sin(0.5817764173314431*xx)*Sin(0.5817764173314431*xx)*Sin(0.5817764173314431*xx)*Sin(1.1635528346628863*yy)*Sin(0.5817764173314431*yy)-1.3862024860124134*v11^2.0*w11*Sin(0.5817764173314431*xx)^2.0*Sin(0.5817764173314431*xx)*Sin(1.1635528346628863*yy)^2.0*Sin(0.5817764173314431*yy)-1355.6591188098544*v11*w11*Cos(1.1635528346628863*yy)*Sin(0.5817764173314431*xx)*Sin(0.5817764173314431*xx)*Sin(0.5817764173314431*yy)-2*0+4.181816040635728*v11^2.0*w11^2*Cos(0.5817764173314431*yy)^2*Sin(0.5817764173314431*xx)^2*Sin(0.5817764173314431*xx)^2.0*Sin(1.1635528346628863*yy)^2.0+102.8726745996389*u11*v11*w11*Cos(0.5817764173314431*xx)*Cos(1.1635528346628863*yy)*Sin(0.5817764173314431*xx)*Sin(0.5817764173314431*yy)*Sin(1.1635528346628863*xx)*Sin(0.5817764173314431*yy)+2*1762.1111935482859*psiy11*w11*Cos(0.5817764173314431*yy)^2*Sin(0.5817764173314431*xx)^2-0-1.3862024860124134*u11^2.0*w11*Sin(1.1635528346628863*xx)^2.0*Sin(0.5817764173314431*xx)*Sin(0.5817764173314431*yy)^2.0*Sin(0.5817764173314431*yy)+2*0-2*0+2*34.91185604076408*u11*w11^3*Cos(0.5817764173314431*xx)*Cos(0.5817764173314431*yy)^2*Sin(0.5817764173314431*xx)^2*Sin(0.5817764173314431*yy)*Sin(1.1635528346628863*xx)*Sin(0.5817764173314431*yy)+14.96222401747032*u11*w11^3*Cos(0.5817764173314431*xx)*Cos(0.5817764173314431*yy)^2*Sin(0.5817764173314431*xx)^2*Sin(0.5817764173314431*yy)*Sin(1.1635528346628863*xx)*Sin(0.5817764173314431*yy)+0-2*0+0+1025.154737122155*w11^2*Cos(0.5817764173314431*xx)^2*Sin(0.5817764173314431*yy)^2+2*0+2*0.24544432226337792*u11^2.0*v11*w11*Cos(0.5817764173314431*yy)*Sin(0.5817764173314431*xx)*Sin(1.1635528346628863*xx)^2.0*Sin(0.5817764173314431*xx)*Sin(0.5817764173314431*yy)^2.0*Sin(1.1635528346628863*yy)+2*0+2*4.312807376913641*u11*v11^2.0*Cos(1.1635528346628863*xx)*Sin(0.5817764173314431*yy)*Sin(0.5817764173314431*xx)^2.0*Sin(1.1635528346628863*yy)^2.0+4.181816040635728*u11^2.0*w11^2*Cos(0.5817764173314431*xx)^2*Sin(0.5817764173314431*yy)^2*Sin(1.1635528346628863*xx)^2.0*Sin(0.5817764173314431*yy)^2.0+0.7012694921810798*u11^3.0*w11*Cos(0.5817764173314431*xx)*Sin(0.5817764173314431*yy)*Sin(1.1635528346628863*xx)^3.0*Sin(0.5817764173314431*yy)^3.0+0+14059.265528617318*v11^2*Cos(1.1635528346628863*yy)^2*Sin(0.5817764173314431*xx)^2-q*w11*Sin(0.5817764173314431*xx)*Sin(0.5817764173314431*yy)+2*60.0090601831227*v11^2*w11*Cos(0.5817764173314431*xx)^2*Sin(0.5817764173314431*yy)*Sin(1.1635528346628863*yy)*Sin(0.5817764173314431*xx)*Sin(1.1635528346628863*yy)+2*0-2*0+102.8726745996389*u11*v11*w11*Cos(1.1635528346628863*xx)*Cos(0.5817764173314431*yy)*Sin(0.5817764173314431*xx)*Sin(0.5817764173314431*yy)*Sin(0.5817764173314431*xx)*Sin(1.1635528346628863*yy)-197.17262631597455*w11^3*Cos(0.5817764173314431*xx)^2*Sin(0.5817764173314431*yy)^2*Sin(0.5817764173314431*xx)*Sin(0.5817764173314431*yy)+2*5.031608606399247*u11*v11^2*Cos(0.5817764173314431*xx)*Sin(1.1635528346628863*yy)*Sin(1.1635528346628863*xx)*Sin(0.5817764173314431*xx)*Sin(0.5817764173314431*yy)*Sin(1.1635528346628863*yy)+2*0+2*0+2*0+685.8178306642594*v11^2*w11*Cos(0.5817764173314431*yy)*Cos(1.1635528346628863*yy)*Sin(0.5817764173314431*xx)^2*Sin(0.5817764173314431*xx)*Sin(1.1635528346628863*yy)+2*0.004409976095479576*u11^2.0*v11^2.0*Sin(1.1635528346628863*xx)^2.0*Sin(0.5817764173314431*xx)^2.0*Sin(0.5817764173314431*yy)^2.0*Sin(1.1635528346628863*yy)^2.0+99.7481601164688*v11*w11^3*Cos(0.5817764173314431*yy)^3*Sin(0.5817764173314431*xx)^3*Sin(0.5817764173314431*xx)*Sin(1.1635528346628863*yy)+2*1.4636356142225047*u11^2.0*w11^2*Cos(0.5817764173314431*yy)^2*Sin(0.5817764173314431*xx)^2*Sin(1.1635528346628863*xx)^2.0*Sin(0.5817764173314431*yy)^2.0+2.372501057954172*psiy11^2*Sin(0.5817764173314431*xx)^2*Sin(0.5817764173314431*yy)^2-25.718168649909728*w11^3*Cos(0.5817764173314431*xx)^2*Sin(0.5817764173314431*yy)^2*Sin(0.5817764173314431*xx)*Sin(0.5817764173314431*yy)+2*0+2*4.312807376913641*u11^2.0*v11*Cos(1.1635528346628863*yy)*Sin(0.5817764173314431*xx)*Sin(1.1635528346628863*xx)^2.0*Sin(0.5817764173314431*yy)^2.0+0-2*0+14059.265528617318*u11^2*Cos(1.1635528346628863*xx)^2*Sin(0.5817764173314431*yy)^2+0+7.207248144419531*u11^2*Sin(1.1635528346628863*xx)^2*Sin(0.5817764173314431*yy)^2+2*60.0090601831227*u11*v11*w11*Cos(0.5817764173314431*xx)*Cos(0.5817764173314431*yy)*Sin(0.5817764173314431*xx)*Sin(1.1635528346628863*yy)*Sin(1.1635528346628863*xx)*Sin(0.5817764173314431*yy)+2*5.854542456890019*u11*v11*w11^2*Cos(0.5817764173314431*xx)*Cos(0.5817764173314431*yy)*Sin(0.5817764173314431*xx)*Sin(0.5817764173314431*yy)*Sin(1.1635528346628863*xx)*Sin(0.5817764173314431*xx)*Sin(0.5817764173314431*yy)*Sin(1.1635528346628863*yy)-4.312807376913641*u11*w11^2*Cos(0.5817764173314431*xx)*Sin(0.5817764173314431*yy)*Sin(1.1635528346628863*xx)*Sin(0.5817764173314431*xx)*Sin(0.5817764173314431*yy)*Sin(0.5817764173314431*yy)+2*0.7117503173862515*psix11*psiy11*Sin(0.5817764173314431*xx)^2*Sin(0.5817764173314431*yy)^2-33.064856556337915*u11*w11^2*Cos(0.5817764173314431*xx)*Sin(0.5817764173314431*yy)*Sin(1.1635528346628863*xx)*Sin(0.5817764173314431*xx)*Sin(0.5817764173314431*yy)*Sin(0.5817764173314431*yy)+2*0+0+14.96222401747032*v11*w11^3*Cos(0.5817764173314431*xx)^2*Cos(0.5817764173314431*yy)*Sin(0.5817764173314431*xx)*Sin(0.5817764173314431*yy)^2*Sin(0.5817764173314431*xx)*Sin(1.1635528346628863*yy)+2*0.6272724060953592*v11^2.0*w11^2*Cos(0.5817764173314431*xx)^2*Sin(0.5817764173314431*yy)^2*Sin(0.5817764173314431*xx)^2.0*Sin(1.1635528346628863*yy)^2.0-2*0+3028.8460326923077*psix11^2*Cos(0.5817764173314431*xx)^2*Sin(0.5817764173314431*yy)^2+2*613.451184716283*v11*w11^2*Cos(0.5817764173314431*xx)^2*Cos(1.1635528346628863*yy)*Sin(0.5817764173314431*xx)*Sin(0.5817764173314431*yy)^2+2*0.8303753702839601*psix11*psiy11*Cos(0.5817764173314431*xx)^2*Cos(0.5817764173314431*yy)^2+2*615.0928668770076*u11^2*Cos(0.5817764173314431*yy)^2*Sin(1.1635528346628863*xx)^2+1025.154737122155*w11^2*Cos(0.5817764173314431*yy)^2*Sin(0.5817764173314431*xx)^2-0.1808090199146626*v11^2.0*w11*Sin(0.5817764173314431*xx)^2.0*Sin(0.5817764173314431*xx)*Sin(1.1635528346628863*yy)^2.0*Sin(0.5817764173314431*yy)+2*0+2*0+171.91328717544255*v11*w11*Cos(0.5817764173314431*yy)*Sin(0.5817764173314431*xx)^2*Sin(1.1635528346628863*yy)-2*0+2*0.10519042382716197*u11*v11^2.0*w11*Cos(0.5817764173314431*xx)*Sin(0.5817764173314431*yy)*Sin(1.1635528346628863*xx)*Sin(0.5817764173314431*xx)^2.0*Sin(0.5817764173314431*yy)*Sin(1.1635528346628863*yy)^2.0+2*0.24544432226337792*u11*v11^2.0*w11*Cos(0.5817764173314431*xx)*Sin(0.5817764173314431*yy)*Sin(1.1635528346628863*xx)*Sin(0.5817764173314431*xx)^2.0*Sin(0.5817764173314431*yy)*Sin(1.1635528346628863*yy)^2.0-2*0+8.363632081271456*u11^2*w11^2*Cos(0.5817764173314431*xx)^2*Sin(0.5817764173314431*yy)^2*Sin(1.1635528346628863*xx)^2*Sin(0.5817764173314431*yy)^2+102.87267459963891*u11*v11*w11*Cos(1.1635528346628863*xx)*Cos(0.5817764173314431*yy)*Sin(0.5817764173314431*xx)*Sin(0.5817764173314431*yy)*Sin(0.5817764173314431*xx)*Sin(1.1635528346628863*yy)-0.1808090199146626*u11^2.0*w11*Sin(1.1635528346628863*xx)^2.0*Sin(0.5817764173314431*xx)*Sin(0.5817764173314431*yy)^2.0*Sin(0.5817764173314431*yy)+2*0+0.014699920318265254*u11^4.0*Sin(1.1635528346628863*xx)^4.0*Sin(0.5817764173314431*yy)^4.0+297.4095270433071*w11^4*Cos(0.5817764173314431*xx)^4*Sin(0.5817764173314431*yy)^4+2*613.451184716283*u11*w11^2*Cos(1.1635528346628863*xx)*Cos(0.5817764173314431*yy)^2*Sin(0.5817764173314431*xx)^2*Sin(0.5817764173314431*yy)+14.962224017470318*u11*w11^3*Cos(0.5817764173314431*xx)*Cos(0.5817764173314431*yy)^2*Sin(0.5817764173314431*xx)^2*Sin(0.5817764173314431*yy)*Sin(1.1635528346628863*xx)*Sin(0.5817764173314431*yy)-176.82510245345927*u11*w11*Cos(1.1635528346628863*xx)*Sin(0.5817764173314431*yy)*Sin(0.5817764173314431*xx)*Sin(0.5817764173314431*yy)+2*89.22285811299211*w11^4*Cos(0.5817764173314431*xx)^2*Cos(0.5817764173314431*yy)^2*Sin(0.5817764173314431*xx)^2*Sin(0.5817764173314431*yy)^2+2*4217.779658585195*u11*v11*Cos(1.1635528346628863*xx)*Cos(1.1635528346628863*yy)*Sin(0.5817764173314431*xx)*Sin(0.5817764173314431*yy)+3028.8460326923077*psiy11^2*Sin(0.5817764173314431*xx)^2*Cos(0.5817764173314431*yy)^2+2*0+2*715.6930488356636*v11*w11^2*Cos(0.5817764173314431*xx)^2*Cos(0.5817764173314431*yy)*Sin(0.5817764173314431*xx)*Sin(0.5817764173314431*yy)*Sin(1.1635528346628863*yy)-25.718168649909728*w11^3*Cos(0.5817764173314431*yy)^2*Sin(0.5817764173314431*xx)^2*Sin(0.5817764173314431*xx)*Sin(0.5817764173314431*yy)+0+0\n";
        assertEquals(parseService.getTermsFromString(inOld), parseService.getTermsFromString(inNew));
    }

    @Test
    void getTerms_whenSign_thenEmpty() {
        String in = "+";
        HashMap<String, Double> expected = new HashMap<>();

        assertEquals(expected, parseService.getTermsFromString(in));
    }

    @Test
    void getTerms_whenOne() {
        String in = "x";
        HashMap<String, Double> expected = new HashMap<>();
        expected.put("x", 1.0);

        assertEquals(expected, parseService.getTermsFromString(in));
    }

    @Test
    void getTerms_whenFirstMinus_thenReadAsTerm() {
        String in = "-x-2*x";
        HashMap<String, Double> expected = new HashMap<>();
        expected.put("x", -3.0);

        assertEquals(expected, parseService.getTermsFromString(in));
    }

    @Test
    void getTerms_whenFirstPlus_thenReadAsTerm() {
        String in = "+x-2*x";
        HashMap<String, Double> expected = new HashMap<>();
        expected.put("x", -1.0);

        assertEquals(expected, parseService.getTermsFromString(in));
    }

    @Test
    void getTerms_whenE_thenPass() {
        String in = "-2.078E-10-2*x";
        HashMap<String, Double> expected = new HashMap<>();
        expected.put("number", -2.078E-10);
        expected.put("x", -2.0);

        assertEquals(expected, parseService.getTermsFromString(in));
    }

    @Test
    void getTerms_whenDifferentTerms_thenSaveSigns() {
        String in = "1 + x - Sin(x^2) + 7a - 7";
        HashMap<String, Double> expected = new HashMap<>();
        expected.put("x", 1.0);
        expected.put("Sin(x^2)", -1.0);
        expected.put("7a", 1.0);
        expected.put("number", -6.0);

        assertEquals(expected, parseService.getTermsFromString(in));
    }

    @Test
    void getTerms_whenSameTermsSameSign_thenSum() {
        String in = "Sin(x*a) + Sin(x*a) - Cos(x*a) + Sin(x*a)";
        HashMap<String, Double> expected = new HashMap<>();
        expected.put("Sin(x*a)", 3.0);
        expected.put("Cos(x*a)", -1.0);

        assertEquals(expected, parseService.getTermsFromString(in));
    }

    @Test
    void getTerms_whenSameTermsDifferentSign_thenAnnihilate() {
        String in = "Sin(x*a) - Sin(x*a) - Cos(x*a) + Sin(x*a) + Cos(x*a)";
        HashMap<String, Double> expected = new HashMap<>();
        expected.put("Sin(x*a)", 1.0);

        assertEquals(expected, parseService.getTermsFromString(in));
    }

    @Test
    void getTerms_whenSameTermsDifferentFactor_thenSum() {
        String in = "Sin(x*a) - 2*Sin(x*a) - Cos(x*a) + Sin(x*a) + Cos(x*a)";
        HashMap<String, Double> expected = new HashMap<>();

        assertEquals(expected, parseService.getTermsFromString(in));
    }

    @Test
    void getTerms_whenNegativeDegree_thenDontTouch() {
        String in = "8.5270548796886186*10^-1";
        HashMap<String, Double> expected = new HashMap<>();
        expected.put("10^-1", 8.5270548796886186);

        assertEquals(expected, parseService.getTermsFromString(in));
    }

    @Test
    void expand() {
        String in = "x*Sin(x)^2.0";
        assertEquals("x*Sin(x)*Sin(x)", parseService.expandDegree(in));

        in = "(x*Sin(x)^2.0)^2.0";
        assertEquals("(x*Sin(x)*Sin(x))*(x*Sin(x)*Sin(x))", parseService.expandAllDegrees(in));

        in = "-Cos(x)^7.0";
        assertEquals("-Cos(x)*Cos(x)*Cos(x)*Cos(x)*Cos(x)*Cos(x)*Cos(x)", parseService.expandAllDegrees(in));

        in = "-Cos(2*x)^2*x";
        assertEquals("-Cos(2*x)*Cos(2*x)*x", parseService.expandAllDegrees(in));

        in = "0.16674547995992886*(-Sin(0.5817764173314433*x)^2.0*x)^4.0";
        assertEquals("0.16674547995992886*(-Sin(0.5817764173314433*x)*Sin(0.5817764173314433*x)*x)*(-Sin(0.5817764173314433*x)*Sin(0.5817764173314433*x)*x)*(-Sin(0.5817764173314433*x)*Sin(0.5817764173314433*x)*x)*(-Sin(0.5817764173314433*x)*Sin(0.5817764173314433*x)*x)", parseService.expandAllDegrees(in));

        in = "1.1100751114986032E7*Cos(1.1635528346628865*x)^2.0*Cos(1.7453292519943295*x)^2.0*Sin(0.5817764173314433*x)*Sin(1.1635528346628865*x)^2.0*Sin(1.7453292519943295*x)*w22()*w23()*w31()*w32()";
        assertEquals("1.1100751114986032E7*Cos(1.1635528346628865*x)*Cos(1.1635528346628865*x)*Cos(1.7453292519943295*x)*Cos(1.7453292519943295*x)*Sin(0.5817764173314433*x)*Sin(1.1635528346628865*x)*Sin(1.1635528346628865*x)*Sin(1.7453292519943295*x)*w22()*w23()*w31()*w32()", parseService.expandAllDegrees(in));

    }

    @Test
    void isSign() {
        String signs = "+-*/";
        for (int i = 0; i < signs.length(); i++) {
            assertTrue(parseService.isSign(signs.charAt(i)));
        }
        String notSigns = "1 = asdf";
        for (int i = 0; i < notSigns.length(); i++) {
            assertFalse(parseService.isSign(notSigns.charAt(i)));
        }
    }

    @Test
    void eReplacer() {
        String in = "10";
        assertEquals("10", parseService.eReplace(in, 0));

        in = "e7";
        assertEquals("*10000000", parseService.eReplace(in, 0));

        in = "e-7";
        assertEquals("*0.00000001", parseService.eReplace(in, 8));

        in = "0.12456e2";
        assertEquals("0.12456*100", parseService.eReplace(in, 0));

        in = "0.12456e3*Sin(x)";
        assertEquals("0.12456*1000*Sin(x)", parseService.eReplace(in, 0));

        in = "1.0021511423251277E7*w13*w23*w31*w32*Cos(0.5817764173314433*x)*Cos(1.1635528346628865*x)*Cos(1.7453292519943295*x)^2.0*Sin(0.5817764173314433*x)*Sin(1.1635528346628865*x)*Sin(1.7453292519943295*x)^2.0";
        assertEquals("1.0021511423251277*10000000*w13*w23*w31*w32*Cos(0.5817764173314433*x)*Cos(1.1635528346628865*x)*Cos(1.7453292519943295*x)^2.0*Sin(0.5817764173314433*x)*Sin(1.1635528346628865*x)*Sin(1.7453292519943295*x)^2.0", parseService.eReplace(in, 0));
    }


    @Test
    void eReplaceAll() {
        String in = "1.18125*0.0*1.4224746001982408E-6*-7.494504917414604E-11";
        assertEquals("1.18125*0.0*1.4224746001982408*0.0000001*-7.494504917414604*0.0", parseService.eReplaceAll(in, 10));
    }

    @Test
    void splitAndSkip_whenBracketsEmbrace_thenDontSplit() {
        String in = "(x*x)";
        ArrayList<String> expected = new ArrayList<>();
        expected.add("(x*x)");
        assertEquals(expected, parseService.splitAndSkipInsideBrackets(in, '*'));
    }

    @Test
    void splitAndSkip() {
        String in = "x*x";
        ArrayList<String> expected = new ArrayList<>();
        expected.add("x");
        expected.add("x");
        assertEquals(expected, parseService.splitAndSkipInsideBrackets(in, '*'));
    }

    @Test
    void splitAndSkip_whenBrackets_thenIgnore() {
        String in = "x*Sin((x))*x+Cos(x)*Cos(x)";
        ArrayList<String> expected = new ArrayList<>();
        expected.add("x");
        expected.add("Sin((x))");
        expected.add("x+Cos(x)");
        expected.add("Cos(x)");

        assertEquals(expected, parseService.splitAndSkipInsideBrackets(in, '*'));

        in = "sin(x*2)*cos(t^2*5x)";
        expected = new ArrayList<>();
        expected.add("sin(x*2)");
        expected.add("cos(t^2*5x)");

        assertEquals(expected, parseService.splitAndSkipInsideBrackets(in, '*'));

        in = "Cos(0.5817764173314433*x)*Cos(0.5817764173314433*x)*Sin(0.5817764173314433*x)*Sin(0.5817764173314433*x)*Sin(0.5817764173314433*y)*Sin(0.5817764173314433*y)*Sin(0.5817764173314433*y)*Sin(0.5817764173314433*y)";
        expected = new ArrayList<>();
        expected.add("Cos(0.5817764173314433*x)");
        expected.add("Cos(0.5817764173314433*x)");
        expected.add("Sin(0.5817764173314433*x)");
        expected.add("Sin(0.5817764173314433*x)");
        expected.add("Sin(0.5817764173314433*y)");
        expected.add("Sin(0.5817764173314433*y)");
        expected.add("Sin(0.5817764173314433*y)");
        expected.add("Sin(0.5817764173314433*y)");

        assertEquals(expected, parseService.splitAndSkipInsideBrackets(in, '*'));

    }

    @Test
    void splitAndSkip_whenDegreeAfter_thenGetIt() {
        String in = "0.0012193263222069805*v11^2.0*Sin(0.5817764173314433*xx)^2.0*Sin(0.5817764173314433*yy)^2.0";
        ArrayList<String> expected = new ArrayList<>();
        expected.add("0.0012193263222069805");
        expected.add("v11^2.0");
        expected.add("Sin(0.5817764173314433*xx)^2.0");
        expected.add("Sin(0.5817764173314433*yy)^2.0");
        assertEquals(expected, parseService.splitAndSkipInsideBrackets(in, '*'));
    }

    @Test
    void splitAndSkip_when_then() {
        String in = "57*(2+34) - sin(x)";
        ArrayList<String> expected = new ArrayList<>();
        expected.add("0.0012193263222069805");
        expected.add("v11^2.0");
        expected.add("Sin(0.5817764173314433*xx)^2.0");
        expected.add("Sin(0.5817764173314433*yy)^2.0");
        assertEquals(expected, parseService.splitAndSkipInsideBrackets(in, '+'));
    }

    @Test
    void expandMinus() {
        String in = "-x+2x-5x+sin(x)";
        assertEquals("+x-2x+5x-sin(x)", parseService.expandMinus(in));

        in = "+x+2x-5x+sin(x)";
        assertEquals("-x-2x+5x-sin(x)", parseService.expandMinus(in));

        in = "x+2x-5x+sin(x)";
        assertEquals("-x-2x+5x-sin(x)", parseService.expandMinus(in));

        in = "-x*4.1234142E-4+2x-5x+sin(x)";
        assertEquals("+x*4.1234142E-4-2x+5x-sin(x)", parseService.expandMinus(in));
    }

    @Test
    void expandAllDegreesByTerm() {
        String in = "psix^2.0+abs";
        assertEquals("psix*psix+abs", parseService.expandDegreeByTerm(in, "psix"));

        in = "psix^2+abs";
        assertEquals("psix*psix+abs", parseService.expandDegreeByTerm(in, "psix"));

        in = "-1237.5*dwx^2-1237";
        assertEquals("-1237.5*dwx*dwx-1237", parseService.expandDegreeByTerm(in, "dwx"));

        in = "10384.615384615385*dux*dwx^2.0";
        String out = parseService.expandDegreeByTerm(in, "dwx");
//        out = out.replaceAll("dwx", "(" + "cos(x)*w + sin(x)^2" + ")");
        assertEquals("10384.615384615385*dux*dwx*dwx", out);


        in = "76.92307692307692*(0.5817764173314433*w11*Cos(0.5817764173314433*yy)*Sin(0.5817764173314433*xx)+1.7453292519943298*w12*Cos(1.7453292519943298*yy)*Sin(0.5817764173314433*xx)+0.5817764173314433*w21*Cos(0.5817764173314433*yy)*Sin(1.7453292519943298*xx)+1.7453292519943298*w22*Cos(1.7453292519943298*yy)*Sin(1.7453292519943298*xx))^2.0*w12*x3(1.0)*y3(2.0)";

    }

    @Test
    void expandDegreeAndReplaceTerm() {
        String in = "psix^2.0+abs";
        assertEquals("Cos(x)^2+2*Cos(x)*tg(x)+tg(x)^2+abs", parseService.expandDegreeAndReplaceTerm(in, "psix", "cos(x) + tg(x)"));
    }

    @Test
    void expandDegreeAndReplaceTerm_multiple() {
        String in = "psix^2.0 + psix^3.0";
        assertEquals("a^2+2*a*Cos(x)+Cos(x)^2+a^3+3*a^2*Cos(x)+3*a*Cos(x)^2+Cos(x)^3", parseService.expandAllDegreesAndReplaceTerm(in, "psix", "cos(x) + a"));
    }

    @Test
    void expandDegreeAndReplaceTerm_multiple_and_coef() {
        String in = "2*psix^2.0 + psix^3.0";
        assertEquals("2*a^2+4*a*Cos(x)+2*Cos(x)^2+a^3+3*a^2*Cos(x)+3*a*Cos(x)^2+Cos(x)^3", parseService.expandAllDegreesAndReplaceTerm(in, "psix", "cos(x) + a"));
    }

    @Test
    void expandDegreeAndReplaceTerm_full() {
        String in = "+7.0*dpsixdx^2+2.10*dpsixdx*dpsiydy";
        String out = parseService.expandAllDegreesAndReplaceTerm(in, "dpsixdx", "bubble");
        assertEquals("+7.0*bubble*bubble+2.10*bubble*dpsiydy", out);
    }

    @Test
    void degreeReplacer() {
        String in = "cos(x)^13.0";
        assertEquals("cos(x)^13", parseService.degreeReplacer(in));
    }

    @Test
    void customSplit() {
        String line = "12 34";
        int[] pow = new int[]{1, 10, 100, 1000, 10000, 100000};

        int x = 0;
        int y = 0;

        int len = line.length();
        int index = len - 1;
        while (index > 0 && line.charAt(index) != ' ') {
            char c = line.charAt(index);
            switch (c) {
                case '+':
                    break;
                case '-':
                    y *= -1;
                    break;
                default:
                    y += (c - '0') * pow[len - index - 1];
                    break;
            }
            index--;
        }

        len = index;
        index--;
        while (index >= 0) {
            char c = line.charAt(index);
            switch (c) {
                case '+':
                    break;
                case '-':
                    x *= -1;
                    break;
                default:
                    x += (c - '0') * pow[len - index - 1];
                    break;
            }

            index--;
        }
    }
}